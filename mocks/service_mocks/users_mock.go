// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/bryansandoval/projects/wayne/internal/service/users/abditory.go

// Package service_mocks is a generated GoMock package.
package service_mocks

import (
	models "github.com/bmsandoval/wayne/internal/db/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUserSvc is a mock of IUserSvc interface
type MockIUserSvc struct {
	ctrl     *gomock.Controller
	recorder *MockIUserSvcMockRecorder
}

// MockIUserSvcMockRecorder is the mock recorder for MockIUserSvc
type MockIUserSvcMockRecorder struct {
	mock *MockIUserSvc
}

// NewMockIUserSvc creates a new mock instance
func NewMockIUserSvc(ctrl *gomock.Controller) *MockIUserSvc {
	mock := &MockIUserSvc{ctrl: ctrl}
	mock.recorder = &MockIUserSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserSvc) EXPECT() *MockIUserSvcMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockIUserSvc) Create(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIUserSvcMockRecorder) Create(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserSvc)(nil).Create), username, password)
}

// FindByUn mocks base method
func (m *MockIUserSvc) FindByUn(username string, user models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUn", username, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUn indicates an expected call of FindByUn
func (mr *MockIUserSvcMockRecorder) FindByUn(username, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUn", reflect.TypeOf((*MockIUserSvc)(nil).FindByUn), username, user)
}

// FindBySub mocks base method
func (m *MockIUserSvc) FindBySub(sub string, user models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySub", sub, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySub indicates an expected call of FindBySub
func (mr *MockIUserSvcMockRecorder) FindBySub(sub, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySub", reflect.TypeOf((*MockIUserSvc)(nil).FindBySub), sub, user)
}

// UsernameAvailable mocks base method
func (m *MockIUserSvc) UsernameAvailable(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsernameAvailable", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsernameAvailable indicates an expected call of UsernameAvailable
func (mr *MockIUserSvcMockRecorder) UsernameAvailable(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsernameAvailable", reflect.TypeOf((*MockIUserSvc)(nil).UsernameAvailable), username)
}

// ValidatePassword mocks base method
func (m *MockIUserSvc) ValidatePassword(username, password string, user models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", username, password, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePassword indicates an expected call of ValidatePassword
func (mr *MockIUserSvcMockRecorder) ValidatePassword(username, password, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockIUserSvc)(nil).ValidatePassword), username, password, user)
}
